program     ::= declaration* EOF
declaration ::= funDecl
            |   varDecl
            |   constDecl
            |   recordDecl
            |   recordInstDecl
            |   unionDecl
            |   enumDecl
            |   listDecl
            |   nsDecl
            |   statement
recordDecl  |   "record" "{" IDENTIFIER ":" TYPE ( "," IDENTIFIER ":" TYPE )* ","? "}"
recordInstDecl| "{" IDENTIFIER "=" expression ( "," IDENTIFIER "=" expression )* ","? "}"
unionDecl   |   "union" "{" TYPE ( "|" TYPE )* "}"
enumDecl    |   "enum" "{" ( IDENTIFIER ( "=" NUMBER )? )+ "}"
listDecl    |   "[" ( expression ( expression "," )* )? "]"
nsDecl      |  "namespace" "{" declaration* "}"
funDecl     ::= "(" parameters? ")" "=>" declaration
parameters  ::= IDENTIFIER ( "," IDENTIFIER )*
varDecl     ::= "var" IDENTIFIER ( ":" TYPE )? ( "=" expression )? ";"
constDecl   ::= "let" IDENTIFIER ( ":" TYPE )? "=" expression ";"
statement   ::= exprStmt
            |   ifStmt
            |   defaultStmt
            |   block
            |   returnStmt
return Stmt ::= "return" expression? ";"
ifStmt      ::= "if"? expression "??" statement ( "!!" statement )?
defaultStmt ::= expression "!?" statement
block       ::= "{" declaration* "}"
exprStmt    ::= expression ";"
expression  ::= assignment
            |   "error" IDENTIFIER
            |   call "." call
            |   logic_or
assignment  ::= ( call "->" )? IDENTIFIER "=" assignment

logic_or    ::= logic_and ( "&&" logic_and )*
logic_and   ::= equality ( "||" equality )*
equality    ::= comparison ( ( "!=" | "==" | "~=" ) comparison )*
comparison  ::= term ( ( ">" | ">=" | "<" | "<=" ) term )*
factor      ::= unary ( ( "/" | "+" ) unary )*
unary       ::= ( "!" | "-" ) unary
            |   call

call        ::= primary ( "(" arguments? ")" | "->" IDENTIFIER )*
arguments   ::= expression ( "," expression )*
primary     ::= NUMBER
            |   STRING
            |   "true"
            |   "false"
            |   "null"
            |   "(" expression ")"
            |   sigil? IDENTIFIER
            |   TYPE
sigil       ::= "~" | "$" | "#" | "?"

comment     ::= "//" | "/*" ... "*/"
docstring   ::= "--" | "---" ... "---"
